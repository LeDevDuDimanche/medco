// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// QueryType query type
// swagger:model queryType
type QueryType string

const (

	// QueryTypePatientList captures enum value "patient_list"
	QueryTypePatientList QueryType = "patient_list"

	// QueryTypeCountPerSite captures enum value "count_per_site"
	QueryTypeCountPerSite QueryType = "count_per_site"

	// QueryTypeCountPerSiteObfuscated captures enum value "count_per_site_obfuscated"
	QueryTypeCountPerSiteObfuscated QueryType = "count_per_site_obfuscated"

	// QueryTypeCountPerSiteShuffled captures enum value "count_per_site_shuffled"
	QueryTypeCountPerSiteShuffled QueryType = "count_per_site_shuffled"

	// QueryTypeCountPerSiteShuffledObfuscated captures enum value "count_per_site_shuffled_obfuscated"
	QueryTypeCountPerSiteShuffledObfuscated QueryType = "count_per_site_shuffled_obfuscated"

	// QueryTypeCountGlobal captures enum value "count_global"
	QueryTypeCountGlobal QueryType = "count_global"

	// QueryTypeCountGlobalObfuscated captures enum value "count_global_obfuscated"
	QueryTypeCountGlobalObfuscated QueryType = "count_global_obfuscated"
)

// for schema
var queryTypeEnum []interface{}

func init() {
	var res []QueryType
	if err := json.Unmarshal([]byte(`["patient_list","count_per_site","count_per_site_obfuscated","count_per_site_shuffled","count_per_site_shuffled_obfuscated","count_global","count_global_obfuscated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryTypeEnum = append(queryTypeEnum, v)
	}
}

func (m QueryType) validateQueryTypeEnum(path, location string, value QueryType) error {
	if err := validate.Enum(path, location, value, queryTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this query type
func (m QueryType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQueryTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
