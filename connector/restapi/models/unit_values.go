// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UnitValues unit values
//
// swagger:model UnitValues
type UnitValues struct {

	// converting units
	ConvertingUnits []*UnitValuesConvertingUnitsItems0 `json:"ConvertingUnits"`

	// equal units
	EqualUnits []string `json:"EqualUnits"`

	// excluding units
	ExcludingUnits []string `json:"ExcludingUnits"`

	// normal units
	NormalUnits string `json:"NormalUnits,omitempty"`
}

// Validate validates this unit values
func (m *UnitValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConvertingUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnitValues) validateConvertingUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.ConvertingUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.ConvertingUnits); i++ {
		if swag.IsZero(m.ConvertingUnits[i]) { // not required
			continue
		}

		if m.ConvertingUnits[i] != nil {
			if err := m.ConvertingUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ConvertingUnits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnitValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnitValues) UnmarshalBinary(b []byte) error {
	var res UnitValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UnitValuesConvertingUnitsItems0 unit values converting units items0
//
// swagger:model UnitValuesConvertingUnitsItems0
type UnitValuesConvertingUnitsItems0 struct {

	// multiplying factor
	MultiplyingFactor string `json:"MultiplyingFactor,omitempty"`

	// units
	Units string `json:"Units,omitempty"`
}

// Validate validates this unit values converting units items0
func (m *UnitValuesConvertingUnitsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UnitValuesConvertingUnitsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnitValuesConvertingUnitsItems0) UnmarshalBinary(b []byte) error {
	var res UnitValuesConvertingUnitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
