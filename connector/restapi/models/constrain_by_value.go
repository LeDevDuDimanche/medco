// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConstrainByValue constrain by value
//
// swagger:model constrainByValue
type ConstrainByValue struct {

	// EQ: equals NE: not equals GT: greater than GE: greater than or equal LT: less than LE: less than or equal IN: contained in BETWEEN: between
	//
	// Required: true
	// Enum: [EQ NE GT GE LT LE IN BETWEEN]
	Operator *string `json:"operator"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this constrain by value
func (m *ConstrainByValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var constrainByValueTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQ","NE","GT","GE","LT","LE","IN","BETWEEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		constrainByValueTypeOperatorPropEnum = append(constrainByValueTypeOperatorPropEnum, v)
	}
}

const (

	// ConstrainByValueOperatorEQ captures enum value "EQ"
	ConstrainByValueOperatorEQ string = "EQ"

	// ConstrainByValueOperatorNE captures enum value "NE"
	ConstrainByValueOperatorNE string = "NE"

	// ConstrainByValueOperatorGT captures enum value "GT"
	ConstrainByValueOperatorGT string = "GT"

	// ConstrainByValueOperatorGE captures enum value "GE"
	ConstrainByValueOperatorGE string = "GE"

	// ConstrainByValueOperatorLT captures enum value "LT"
	ConstrainByValueOperatorLT string = "LT"

	// ConstrainByValueOperatorLE captures enum value "LE"
	ConstrainByValueOperatorLE string = "LE"

	// ConstrainByValueOperatorIN captures enum value "IN"
	ConstrainByValueOperatorIN string = "IN"

	// ConstrainByValueOperatorBETWEEN captures enum value "BETWEEN"
	ConstrainByValueOperatorBETWEEN string = "BETWEEN"
)

// prop value enum
func (m *ConstrainByValue) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, constrainByValueTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ConstrainByValue) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *ConstrainByValue) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConstrainByValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConstrainByValue) UnmarshalBinary(b []byte) error {
	var res ConstrainByValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
