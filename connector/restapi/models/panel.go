// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Panel panel
//
// swagger:model panel
type Panel struct {

	// i2b2 items (linked by an OR)
	Items []*PanelItemsItems0 `json:"items"`

	// exclude the i2b2 panel
	// Required: true
	Not *bool `json:"not"`

	// panel timing
	PanelTiming *Timing `json:"panelTiming,omitempty"`
}

// Validate validates this panel
func (m *Panel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePanelTiming(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Panel) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Panel) validateNot(formats strfmt.Registry) error {

	if err := validate.Required("not", "body", m.Not); err != nil {
		return err
	}

	return nil
}

func (m *Panel) validatePanelTiming(formats strfmt.Registry) error {
	if swag.IsZero(m.PanelTiming) { // not required
		return nil
	}

	if m.PanelTiming != nil {
		if err := m.PanelTiming.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("panelTiming")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this panel based on the context it is used
func (m *Panel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePanelTiming(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Panel) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {
			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Panel) contextValidatePanelTiming(ctx context.Context, formats strfmt.Registry) error {

	if m.PanelTiming != nil {
		if err := m.PanelTiming.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("panelTiming")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Panel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Panel) UnmarshalBinary(b []byte) error {
	var res Panel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PanelItemsItems0 panel items items0
//
// swagger:model PanelItemsItems0
type PanelItemsItems0 struct {

	// encrypted
	// Required: true
	Encrypted *bool `json:"encrypted"`

	// modifier
	Modifier *PanelItemsItems0Modifier `json:"modifier,omitempty"`

	// EQ: equals NE: not equals GT: greater than GE: greater than or equal LT: less than LE: less than or equal BETWEEN: between (value syntax: x and y)
	//
	// Enum: [EQ NE GT GE LT LE BETWEEN]
	Operator string `json:"operator,omitempty"`

	// query term
	// Required: true
	// Pattern: ^([\w=-]+)$|^((\/[^\/]+)+\/)$
	QueryTerm *string `json:"queryTerm"`

	// value
	// Pattern: ^[+-]?([0-9]*[.])?[0-9]+
	Value string `json:"value,omitempty"`
}

// Validate validates this panel items items0
func (m *PanelItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncrypted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PanelItemsItems0) validateEncrypted(formats strfmt.Registry) error {

	if err := validate.Required("encrypted", "body", m.Encrypted); err != nil {
		return err
	}

	return nil
}

func (m *PanelItemsItems0) validateModifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Modifier) { // not required
		return nil
	}

	if m.Modifier != nil {
		if err := m.Modifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifier")
			}
			return err
		}
	}

	return nil
}

var panelItemsItems0TypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EQ","NE","GT","GE","LT","LE","BETWEEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		panelItemsItems0TypeOperatorPropEnum = append(panelItemsItems0TypeOperatorPropEnum, v)
	}
}

const (

	// PanelItemsItems0OperatorEQ captures enum value "EQ"
	PanelItemsItems0OperatorEQ string = "EQ"

	// PanelItemsItems0OperatorNE captures enum value "NE"
	PanelItemsItems0OperatorNE string = "NE"

	// PanelItemsItems0OperatorGT captures enum value "GT"
	PanelItemsItems0OperatorGT string = "GT"

	// PanelItemsItems0OperatorGE captures enum value "GE"
	PanelItemsItems0OperatorGE string = "GE"

	// PanelItemsItems0OperatorLT captures enum value "LT"
	PanelItemsItems0OperatorLT string = "LT"

	// PanelItemsItems0OperatorLE captures enum value "LE"
	PanelItemsItems0OperatorLE string = "LE"

	// PanelItemsItems0OperatorBETWEEN captures enum value "BETWEEN"
	PanelItemsItems0OperatorBETWEEN string = "BETWEEN"
)

// prop value enum
func (m *PanelItemsItems0) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, panelItemsItems0TypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PanelItemsItems0) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *PanelItemsItems0) validateQueryTerm(formats strfmt.Registry) error {

	if err := validate.Required("queryTerm", "body", m.QueryTerm); err != nil {
		return err
	}

	if err := validate.Pattern("queryTerm", "body", *m.QueryTerm, `^([\w=-]+)$|^((\/[^\/]+)+\/)$`); err != nil {
		return err
	}

	return nil
}

func (m *PanelItemsItems0) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if err := validate.Pattern("value", "body", m.Value, `^[+-]?([0-9]*[.])?[0-9]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this panel items items0 based on the context it is used
func (m *PanelItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PanelItemsItems0) contextValidateModifier(ctx context.Context, formats strfmt.Registry) error {

	if m.Modifier != nil {
		if err := m.Modifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PanelItemsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PanelItemsItems0) UnmarshalBinary(b []byte) error {
	var res PanelItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PanelItemsItems0Modifier panel items items0 modifier
//
// swagger:model PanelItemsItems0Modifier
type PanelItemsItems0Modifier struct {

	// applied path
	// Required: true
	// Pattern: ^((\/[^\/]+)+\/%?)$
	AppliedPath *string `json:"appliedPath"`

	// modifier key
	// Required: true
	// Pattern: ^((\/[^\/]+)+\/)$
	ModifierKey *string `json:"modifierKey"`
}

// Validate validates this panel items items0 modifier
func (m *PanelItemsItems0Modifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifierKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PanelItemsItems0Modifier) validateAppliedPath(formats strfmt.Registry) error {

	if err := validate.Required("modifier"+"."+"appliedPath", "body", m.AppliedPath); err != nil {
		return err
	}

	if err := validate.Pattern("modifier"+"."+"appliedPath", "body", *m.AppliedPath, `^((\/[^\/]+)+\/%?)$`); err != nil {
		return err
	}

	return nil
}

func (m *PanelItemsItems0Modifier) validateModifierKey(formats strfmt.Registry) error {

	if err := validate.Required("modifier"+"."+"modifierKey", "body", m.ModifierKey); err != nil {
		return err
	}

	if err := validate.Pattern("modifier"+"."+"modifierKey", "body", *m.ModifierKey, `^((\/[^\/]+)+\/)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this panel items items0 modifier based on context it is used
func (m *PanelItemsItems0Modifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PanelItemsItems0Modifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PanelItemsItems0Modifier) UnmarshalBinary(b []byte) error {
	var res PanelItemsItems0Modifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
