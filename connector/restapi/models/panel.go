// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Panel panel
//
// swagger:model panel
type Panel struct {

	// i2b2 items (linked by an OR)
	Items []*PanelItemsItems0 `json:"items"`

	// exclude the i2b2 panel
	// Required: true
	Not *bool `json:"not"`

	// panel timing
	PanelTiming Timing `json:"panelTiming,omitempty"`
}

// Validate validates this panel
func (m *Panel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePanelTiming(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Panel) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Panel) validateNot(formats strfmt.Registry) error {

	if err := validate.Required("not", "body", m.Not); err != nil {
		return err
	}

	return nil
}

func (m *Panel) validatePanelTiming(formats strfmt.Registry) error {

	if swag.IsZero(m.PanelTiming) { // not required
		return nil
	}

	if err := m.PanelTiming.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("panelTiming")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Panel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Panel) UnmarshalBinary(b []byte) error {
	var res Panel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PanelItemsItems0 panel items items0
//
// swagger:model PanelItemsItems0
type PanelItemsItems0 struct {

	// constrain by value
	ConstrainByValue *ConstrainByValue `json:"constrainByValue,omitempty"`

	// encrypted
	// Required: true
	Encrypted *bool `json:"encrypted"`

	// modifier
	Modifier *PanelItemsItems0Modifier `json:"modifier,omitempty"`

	// query term
	// Required: true
	// Pattern: ^([\w=-]+)$|^((\/[^\/]+)+\/)$
	QueryTerm *string `json:"queryTerm"`
}

// Validate validates this panel items items0
func (m *PanelItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstrainByValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncrypted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PanelItemsItems0) validateConstrainByValue(formats strfmt.Registry) error {

	if swag.IsZero(m.ConstrainByValue) { // not required
		return nil
	}

	if m.ConstrainByValue != nil {
		if err := m.ConstrainByValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("constrainByValue")
			}
			return err
		}
	}

	return nil
}

func (m *PanelItemsItems0) validateEncrypted(formats strfmt.Registry) error {

	if err := validate.Required("encrypted", "body", m.Encrypted); err != nil {
		return err
	}

	return nil
}

func (m *PanelItemsItems0) validateModifier(formats strfmt.Registry) error {

	if swag.IsZero(m.Modifier) { // not required
		return nil
	}

	if m.Modifier != nil {
		if err := m.Modifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifier")
			}
			return err
		}
	}

	return nil
}

func (m *PanelItemsItems0) validateQueryTerm(formats strfmt.Registry) error {

	if err := validate.Required("queryTerm", "body", m.QueryTerm); err != nil {
		return err
	}

	if err := validate.Pattern("queryTerm", "body", string(*m.QueryTerm), `^([\w=-]+)$|^((\/[^\/]+)+\/)$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PanelItemsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PanelItemsItems0) UnmarshalBinary(b []byte) error {
	var res PanelItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PanelItemsItems0Modifier panel items items0 modifier
//
// swagger:model PanelItemsItems0Modifier
type PanelItemsItems0Modifier struct {

	// applied path
	// Required: true
	// Pattern: ^((\/[^\/]+)+\/%?)$
	AppliedPath *string `json:"appliedPath"`

	// constrain by value
	ConstrainByValue *ConstrainByValue `json:"constrainByValue,omitempty"`

	// modifier key
	// Required: true
	// Pattern: ^((\/[^\/]+)+\/)$
	ModifierKey *string `json:"modifierKey"`
}

// Validate validates this panel items items0 modifier
func (m *PanelItemsItems0Modifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstrainByValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifierKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PanelItemsItems0Modifier) validateAppliedPath(formats strfmt.Registry) error {

	if err := validate.Required("modifier"+"."+"appliedPath", "body", m.AppliedPath); err != nil {
		return err
	}

	if err := validate.Pattern("modifier"+"."+"appliedPath", "body", string(*m.AppliedPath), `^((\/[^\/]+)+\/%?)$`); err != nil {
		return err
	}

	return nil
}

func (m *PanelItemsItems0Modifier) validateConstrainByValue(formats strfmt.Registry) error {

	if swag.IsZero(m.ConstrainByValue) { // not required
		return nil
	}

	if m.ConstrainByValue != nil {
		if err := m.ConstrainByValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modifier" + "." + "constrainByValue")
			}
			return err
		}
	}

	return nil
}

func (m *PanelItemsItems0Modifier) validateModifierKey(formats strfmt.Registry) error {

	if err := validate.Required("modifier"+"."+"modifierKey", "body", m.ModifierKey); err != nil {
		return err
	}

	if err := validate.Pattern("modifier"+"."+"modifierKey", "body", string(*m.ModifierKey), `^((\/[^\/]+)+\/)$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PanelItemsItems0Modifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PanelItemsItems0Modifier) UnmarshalBinary(b []byte) error {
	var res PanelItemsItems0Modifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
