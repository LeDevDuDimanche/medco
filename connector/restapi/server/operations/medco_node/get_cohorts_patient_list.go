// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco/connector/restapi/models"
)

// GetCohortsPatientListHandlerFunc turns a function with the right signature into a get cohorts patient list handler
type GetCohortsPatientListHandlerFunc func(GetCohortsPatientListParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCohortsPatientListHandlerFunc) Handle(params GetCohortsPatientListParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetCohortsPatientListHandler interface for that can handle valid get cohorts patient list params
type GetCohortsPatientListHandler interface {
	Handle(GetCohortsPatientListParams, *models.User) middleware.Responder
}

// NewGetCohortsPatientList creates a new http.Handler for the get cohorts patient list operation
func NewGetCohortsPatientList(ctx *middleware.Context, handler GetCohortsPatientListHandler) *GetCohortsPatientList {
	return &GetCohortsPatientList{Context: ctx, Handler: handler}
}

/* GetCohortsPatientList swagger:route GET /node/explore/cohorts/patientList/{name} medco-node getCohortsPatientList

Retrieve the encrypted patient list for a given cohort name

*/
type GetCohortsPatientList struct {
	Context *middleware.Context
	Handler GetCohortsPatientListHandler
}

func (o *GetCohortsPatientList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCohortsPatientListParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetCohortsPatientListDefaultBody get cohorts patient list default body
//
// swagger:model GetCohortsPatientListDefaultBody
type GetCohortsPatientListDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get cohorts patient list default body
func (o *GetCohortsPatientListDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get cohorts patient list default body based on context it is used
func (o *GetCohortsPatientListDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsPatientListDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsPatientListDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsPatientListDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCohortsPatientListForbiddenBody get cohorts patient list forbidden body
//
// swagger:model GetCohortsPatientListForbiddenBody
type GetCohortsPatientListForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get cohorts patient list forbidden body
func (o *GetCohortsPatientListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get cohorts patient list forbidden body based on context it is used
func (o *GetCohortsPatientListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsPatientListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsPatientListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsPatientListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCohortsPatientListNotFoundBody get cohorts patient list not found body
//
// swagger:model GetCohortsPatientListNotFoundBody
type GetCohortsPatientListNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get cohorts patient list not found body
func (o *GetCohortsPatientListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get cohorts patient list not found body based on context it is used
func (o *GetCohortsPatientListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsPatientListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsPatientListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsPatientListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetCohortsPatientListOKBody get cohorts patient list o k body
//
// swagger:model GetCohortsPatientListOKBody
type GetCohortsPatientListOKBody struct {

	// results
	Results []string `json:"results"`

	// timers
	Timers models.Timers `json:"timers"`
}

// Validate validates this get cohorts patient list o k body
func (o *GetCohortsPatientListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCohortsPatientListOKBody) validateTimers(formats strfmt.Registry) error {
	if swag.IsZero(o.Timers) { // not required
		return nil
	}

	if err := o.Timers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getCohortsPatientListOK" + "." + "timers")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get cohorts patient list o k body based on the context it is used
func (o *GetCohortsPatientListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTimers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCohortsPatientListOKBody) contextValidateTimers(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Timers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getCohortsPatientListOK" + "." + "timers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsPatientListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsPatientListOKBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsPatientListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
