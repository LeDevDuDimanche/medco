// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new medco node API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for medco node API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCohorts(params *DeleteCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCohortsOK, error)

	ExploreQuery(params *ExploreQueryParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreQueryOK, error)

	ExploreSearchConceptChildren(params *ExploreSearchConceptChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchConceptChildrenOK, error)

	ExploreSearchConceptInfo(params *ExploreSearchConceptInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchConceptInfoOK, error)

	ExploreSearchModifierChildren(params *ExploreSearchModifierChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchModifierChildrenOK, error)

	ExploreSearchModifierInfo(params *ExploreSearchModifierInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchModifierInfoOK, error)

	GetCohorts(params *GetCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCohortsOK, error)

	GetExploreQuery(params *GetExploreQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetExploreQueryOK, error)

	PostCohorts(params *PostCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCohortsOK, error)

	PutCohorts(params *PutCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*PutCohortsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCohorts deletes a cohort if it exists
*/
func (a *Client) DeleteCohorts(params *DeleteCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCohortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCohorts",
		Method:             "DELETE",
		PathPattern:        "/node/explore/cohorts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCohortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreQuery meds co explore query to the node
*/
func (a *Client) ExploreQuery(params *ExploreQueryParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreQuery",
		Method:             "POST",
		PathPattern:        "/node/explore/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreSearchConceptChildren returns the concept children both concepts and modifiers
*/
func (a *Client) ExploreSearchConceptChildren(params *ExploreSearchConceptChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchConceptChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreSearchConceptChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreSearchConceptChildren",
		Method:             "POST",
		PathPattern:        "/node/explore/search/concept-children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreSearchConceptChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreSearchConceptChildrenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreSearchConceptChildrenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreSearchConceptInfo returns the concept info
*/
func (a *Client) ExploreSearchConceptInfo(params *ExploreSearchConceptInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchConceptInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreSearchConceptInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreSearchConceptInfo",
		Method:             "POST",
		PathPattern:        "/node/explore/search/concept-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreSearchConceptInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreSearchConceptInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreSearchConceptInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreSearchModifierChildren returns the modifier children
*/
func (a *Client) ExploreSearchModifierChildren(params *ExploreSearchModifierChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchModifierChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreSearchModifierChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreSearchModifierChildren",
		Method:             "POST",
		PathPattern:        "/node/explore/search/modifier-children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreSearchModifierChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreSearchModifierChildrenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreSearchModifierChildrenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExploreSearchModifierInfo returns the modifier info
*/
func (a *Client) ExploreSearchModifierInfo(params *ExploreSearchModifierInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ExploreSearchModifierInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExploreSearchModifierInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exploreSearchModifierInfo",
		Method:             "POST",
		PathPattern:        "/node/explore/search/modifier-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExploreSearchModifierInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExploreSearchModifierInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExploreSearchModifierInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCohorts retrieves cohort names and patient set i ds
*/
func (a *Client) GetCohorts(params *GetCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCohortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCohorts",
		Method:             "GET",
		PathPattern:        "/node/explore/cohorts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCohortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetExploreQuery gets status and result of a med co explore query
*/
func (a *Client) GetExploreQuery(params *GetExploreQueryParams, authInfo runtime.ClientAuthInfoWriter) (*GetExploreQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExploreQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExploreQuery",
		Method:             "GET",
		PathPattern:        "/node/explore/query/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExploreQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExploreQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetExploreQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostCohorts adds a new cohort
*/
func (a *Client) PostCohorts(params *PostCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCohortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCohorts",
		Method:             "POST",
		PathPattern:        "/node/explore/cohorts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCohortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PutCohorts updates a cohort
*/
func (a *Client) PutCohorts(params *PutCohortsParams, authInfo runtime.ClientAuthInfoWriter) (*PutCohortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCohortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCohorts",
		Method:             "PUT",
		PathPattern:        "/node/explore/cohorts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCohortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutCohortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PutCohortsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
