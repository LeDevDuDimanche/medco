// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco/connector/restapi/models"
)

// GetCohortsPatientListReader is a Reader for the GetCohortsPatientList structure.
type GetCohortsPatientListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCohortsPatientListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCohortsPatientListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetCohortsPatientListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCohortsPatientListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCohortsPatientListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCohortsPatientListOK creates a GetCohortsPatientListOK with default headers values
func NewGetCohortsPatientListOK() *GetCohortsPatientListOK {
	return &GetCohortsPatientListOK{}
}

/* GetCohortsPatientListOK describes a response with status code 200, with default header values.

Queried patient list
*/
type GetCohortsPatientListOK struct {
	Payload *GetCohortsPatientListOKBody
}

func (o *GetCohortsPatientListOK) Error() string {
	return fmt.Sprintf("[GET /node/explore/cohorts/patientList][%d] getCohortsPatientListOK  %+v", 200, o.Payload)
}
func (o *GetCohortsPatientListOK) GetPayload() *GetCohortsPatientListOKBody {
	return o.Payload
}

func (o *GetCohortsPatientListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCohortsPatientListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCohortsPatientListForbidden creates a GetCohortsPatientListForbidden with default headers values
func NewGetCohortsPatientListForbidden() *GetCohortsPatientListForbidden {
	return &GetCohortsPatientListForbidden{}
}

/* GetCohortsPatientListForbidden describes a response with status code 403, with default header values.

Request is valid and user is authenticated, but not authorized to perform this action.
*/
type GetCohortsPatientListForbidden struct {
	Payload *GetCohortsPatientListForbiddenBody
}

func (o *GetCohortsPatientListForbidden) Error() string {
	return fmt.Sprintf("[GET /node/explore/cohorts/patientList][%d] getCohortsPatientListForbidden  %+v", 403, o.Payload)
}
func (o *GetCohortsPatientListForbidden) GetPayload() *GetCohortsPatientListForbiddenBody {
	return o.Payload
}

func (o *GetCohortsPatientListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCohortsPatientListForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCohortsPatientListNotFound creates a GetCohortsPatientListNotFound with default headers values
func NewGetCohortsPatientListNotFound() *GetCohortsPatientListNotFound {
	return &GetCohortsPatientListNotFound{}
}

/* GetCohortsPatientListNotFound describes a response with status code 404, with default header values.

Not found.
*/
type GetCohortsPatientListNotFound struct {
	Payload *GetCohortsPatientListNotFoundBody
}

func (o *GetCohortsPatientListNotFound) Error() string {
	return fmt.Sprintf("[GET /node/explore/cohorts/patientList][%d] getCohortsPatientListNotFound  %+v", 404, o.Payload)
}
func (o *GetCohortsPatientListNotFound) GetPayload() *GetCohortsPatientListNotFoundBody {
	return o.Payload
}

func (o *GetCohortsPatientListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCohortsPatientListNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCohortsPatientListDefault creates a GetCohortsPatientListDefault with default headers values
func NewGetCohortsPatientListDefault(code int) *GetCohortsPatientListDefault {
	return &GetCohortsPatientListDefault{
		_statusCode: code,
	}
}

/* GetCohortsPatientListDefault describes a response with status code -1, with default header values.

Error response.
*/
type GetCohortsPatientListDefault struct {
	_statusCode int

	Payload *GetCohortsPatientListDefaultBody
}

// Code gets the status code for the get cohorts patient list default response
func (o *GetCohortsPatientListDefault) Code() int {
	return o._statusCode
}

func (o *GetCohortsPatientListDefault) Error() string {
	return fmt.Sprintf("[GET /node/explore/cohorts/patientList][%d] getCohortsPatientList default  %+v", o._statusCode, o.Payload)
}
func (o *GetCohortsPatientListDefault) GetPayload() *GetCohortsPatientListDefaultBody {
	return o.Payload
}

func (o *GetCohortsPatientListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCohortsPatientListDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetCohortsPatientListDefaultBody get cohorts patient list default body
swagger:model GetCohortsPatientListDefaultBody
*/
type GetCohortsPatientListDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get cohorts patient list default body
func (o *GetCohortsPatientListDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get cohorts patient list default body based on context it is used
func (o *GetCohortsPatientListDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsPatientListDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsPatientListDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsPatientListDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCohortsPatientListForbiddenBody get cohorts patient list forbidden body
swagger:model GetCohortsPatientListForbiddenBody
*/
type GetCohortsPatientListForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get cohorts patient list forbidden body
func (o *GetCohortsPatientListForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get cohorts patient list forbidden body based on context it is used
func (o *GetCohortsPatientListForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsPatientListForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsPatientListForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsPatientListForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCohortsPatientListNotFoundBody get cohorts patient list not found body
swagger:model GetCohortsPatientListNotFoundBody
*/
type GetCohortsPatientListNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get cohorts patient list not found body
func (o *GetCohortsPatientListNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get cohorts patient list not found body based on context it is used
func (o *GetCohortsPatientListNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsPatientListNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsPatientListNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsPatientListNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCohortsPatientListOKBody get cohorts patient list o k body
swagger:model GetCohortsPatientListOKBody
*/
type GetCohortsPatientListOKBody struct {

	// results
	Results []string `json:"results"`

	// timers
	Timers models.Timers `json:"timers"`
}

// Validate validates this get cohorts patient list o k body
func (o *GetCohortsPatientListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCohortsPatientListOKBody) validateTimers(formats strfmt.Registry) error {
	if swag.IsZero(o.Timers) { // not required
		return nil
	}

	if err := o.Timers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getCohortsPatientListOK" + "." + "timers")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get cohorts patient list o k body based on the context it is used
func (o *GetCohortsPatientListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTimers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCohortsPatientListOKBody) contextValidateTimers(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Timers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getCohortsPatientListOK" + "." + "timers")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCohortsPatientListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCohortsPatientListOKBody) UnmarshalBinary(b []byte) error {
	var res GetCohortsPatientListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
