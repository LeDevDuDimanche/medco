// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewExploreQueryParams creates a new ExploreQueryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExploreQueryParams() *ExploreQueryParams {
	return &ExploreQueryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExploreQueryParamsWithTimeout creates a new ExploreQueryParams object
// with the ability to set a timeout on a request.
func NewExploreQueryParamsWithTimeout(timeout time.Duration) *ExploreQueryParams {
	return &ExploreQueryParams{
		timeout: timeout,
	}
}

// NewExploreQueryParamsWithContext creates a new ExploreQueryParams object
// with the ability to set a context for a request.
func NewExploreQueryParamsWithContext(ctx context.Context) *ExploreQueryParams {
	return &ExploreQueryParams{
		Context: ctx,
	}
}

// NewExploreQueryParamsWithHTTPClient creates a new ExploreQueryParams object
// with the ability to set a custom HTTPClient for a request.
func NewExploreQueryParamsWithHTTPClient(client *http.Client) *ExploreQueryParams {
	return &ExploreQueryParams{
		HTTPClient: client,
	}
}

/* ExploreQueryParams contains all the parameters to send to the API endpoint
   for the explore query operation.

   Typically these are written to a http.Request.
*/
type ExploreQueryParams struct {

	/* QueryRequest.

	   MedCo-Explore query request.
	*/
	QueryRequest ExploreQueryBody

	/* Sync.

	   Request synchronous query (defaults to true).

	   Default: true
	*/
	Sync *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the explore query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExploreQueryParams) WithDefaults() *ExploreQueryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the explore query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExploreQueryParams) SetDefaults() {
	var (
		syncDefault = bool(true)
	)

	val := ExploreQueryParams{
		Sync: &syncDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the explore query params
func (o *ExploreQueryParams) WithTimeout(timeout time.Duration) *ExploreQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the explore query params
func (o *ExploreQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the explore query params
func (o *ExploreQueryParams) WithContext(ctx context.Context) *ExploreQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the explore query params
func (o *ExploreQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the explore query params
func (o *ExploreQueryParams) WithHTTPClient(client *http.Client) *ExploreQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the explore query params
func (o *ExploreQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQueryRequest adds the queryRequest to the explore query params
func (o *ExploreQueryParams) WithQueryRequest(queryRequest ExploreQueryBody) *ExploreQueryParams {
	o.SetQueryRequest(queryRequest)
	return o
}

// SetQueryRequest adds the queryRequest to the explore query params
func (o *ExploreQueryParams) SetQueryRequest(queryRequest ExploreQueryBody) {
	o.QueryRequest = queryRequest
}

// WithSync adds the sync to the explore query params
func (o *ExploreQueryParams) WithSync(sync *bool) *ExploreQueryParams {
	o.SetSync(sync)
	return o
}

// SetSync adds the sync to the explore query params
func (o *ExploreQueryParams) SetSync(sync *bool) {
	o.Sync = sync
}

// WriteToRequest writes these params to a swagger request
func (o *ExploreQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.QueryRequest); err != nil {
		return err
	}

	if o.Sync != nil {

		// query param sync
		var qrSync bool

		if o.Sync != nil {
			qrSync = *o.Sync
		}
		qSync := swag.FormatBool(qrSync)
		if qSync != "" {

			if err := r.SetQueryParam("sync", qSync); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
