// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco/connector/restapi/models"
)

// ExploreSearchConceptChildrenReader is a Reader for the ExploreSearchConceptChildren structure.
type ExploreSearchConceptChildrenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExploreSearchConceptChildrenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExploreSearchConceptChildrenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewExploreSearchConceptChildrenDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExploreSearchConceptChildrenOK creates a ExploreSearchConceptChildrenOK with default headers values
func NewExploreSearchConceptChildrenOK() *ExploreSearchConceptChildrenOK {
	return &ExploreSearchConceptChildrenOK{}
}

/*ExploreSearchConceptChildrenOK handles this case with default header values.

MedCo-Explore search concept children query response.
*/
type ExploreSearchConceptChildrenOK struct {
	Payload *ExploreSearchConceptChildrenOKBody
}

func (o *ExploreSearchConceptChildrenOK) Error() string {
	return fmt.Sprintf("[POST /node/explore/search/concept-children][%d] exploreSearchConceptChildrenOK  %+v", 200, o.Payload)
}

func (o *ExploreSearchConceptChildrenOK) GetPayload() *ExploreSearchConceptChildrenOKBody {
	return o.Payload
}

func (o *ExploreSearchConceptChildrenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExploreSearchConceptChildrenOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExploreSearchConceptChildrenDefault creates a ExploreSearchConceptChildrenDefault with default headers values
func NewExploreSearchConceptChildrenDefault(code int) *ExploreSearchConceptChildrenDefault {
	return &ExploreSearchConceptChildrenDefault{
		_statusCode: code,
	}
}

/*ExploreSearchConceptChildrenDefault handles this case with default header values.

Error response.
*/
type ExploreSearchConceptChildrenDefault struct {
	_statusCode int

	Payload *ExploreSearchConceptChildrenDefaultBody
}

// Code gets the status code for the explore search concept children default response
func (o *ExploreSearchConceptChildrenDefault) Code() int {
	return o._statusCode
}

func (o *ExploreSearchConceptChildrenDefault) Error() string {
	return fmt.Sprintf("[POST /node/explore/search/concept-children][%d] exploreSearchConceptChildren default  %+v", o._statusCode, o.Payload)
}

func (o *ExploreSearchConceptChildrenDefault) GetPayload() *ExploreSearchConceptChildrenDefaultBody {
	return o.Payload
}

func (o *ExploreSearchConceptChildrenDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExploreSearchConceptChildrenDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ExploreSearchConceptChildrenDefaultBody explore search concept children default body
swagger:model ExploreSearchConceptChildrenDefaultBody
*/
type ExploreSearchConceptChildrenDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this explore search concept children default body
func (o *ExploreSearchConceptChildrenDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExploreSearchConceptChildrenDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreSearchConceptChildrenDefaultBody) UnmarshalBinary(b []byte) error {
	var res ExploreSearchConceptChildrenDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ExploreSearchConceptChildrenOKBody explore search concept children o k body
swagger:model ExploreSearchConceptChildrenOKBody
*/
type ExploreSearchConceptChildrenOKBody struct {

	// results
	Results []*models.ExploreSearchResultElement `json:"results"`

	// search
	Search *models.ExploreSearchConceptChildren `json:"search,omitempty"`
}

// Validate validates this explore search concept children o k body
func (o *ExploreSearchConceptChildrenOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExploreSearchConceptChildrenOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exploreSearchConceptChildrenOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ExploreSearchConceptChildrenOKBody) validateSearch(formats strfmt.Registry) error {

	if swag.IsZero(o.Search) { // not required
		return nil
	}

	if o.Search != nil {
		if err := o.Search.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exploreSearchConceptChildrenOK" + "." + "search")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExploreSearchConceptChildrenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExploreSearchConceptChildrenOKBody) UnmarshalBinary(b []byte) error {
	var res ExploreSearchConceptChildrenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
