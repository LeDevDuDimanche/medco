// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutCohortsReader is a Reader for the PutCohorts structure.
type PutCohortsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCohortsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutCohortsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPutCohortsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutCohortsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPutCohortsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutCohortsOK creates a PutCohortsOK with default headers values
func NewPutCohortsOK() *PutCohortsOK {
	return &PutCohortsOK{}
}

/*PutCohortsOK handles this case with default header values.

Updated cohort
*/
type PutCohortsOK struct {
}

func (o *PutCohortsOK) Error() string {
	return fmt.Sprintf("[PUT /node/explore/cohorts/{name}][%d] putCohortsOK ", 200)
}

func (o *PutCohortsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCohortsNotFound creates a PutCohortsNotFound with default headers values
func NewPutCohortsNotFound() *PutCohortsNotFound {
	return &PutCohortsNotFound{}
}

/*PutCohortsNotFound handles this case with default header values.

The cohort does not exist. Try POST /node/explore/cohorts to create a new cohort.
*/
type PutCohortsNotFound struct {
}

func (o *PutCohortsNotFound) Error() string {
	return fmt.Sprintf("[PUT /node/explore/cohorts/{name}][%d] putCohortsNotFound ", 404)
}

func (o *PutCohortsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCohortsConflict creates a PutCohortsConflict with default headers values
func NewPutCohortsConflict() *PutCohortsConflict {
	return &PutCohortsConflict{}
}

/*PutCohortsConflict handles this case with default header values.

DB has been updated since last importation. Try GET /node/explore/cohorts to fetch the most recent updates.
*/
type PutCohortsConflict struct {
}

func (o *PutCohortsConflict) Error() string {
	return fmt.Sprintf("[PUT /node/explore/cohorts/{name}][%d] putCohortsConflict ", 409)
}

func (o *PutCohortsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCohortsDefault creates a PutCohortsDefault with default headers values
func NewPutCohortsDefault(code int) *PutCohortsDefault {
	return &PutCohortsDefault{
		_statusCode: code,
	}
}

/*PutCohortsDefault handles this case with default header values.

Error response.
*/
type PutCohortsDefault struct {
	_statusCode int

	Payload *PutCohortsDefaultBody
}

// Code gets the status code for the put cohorts default response
func (o *PutCohortsDefault) Code() int {
	return o._statusCode
}

func (o *PutCohortsDefault) Error() string {
	return fmt.Sprintf("[PUT /node/explore/cohorts/{name}][%d] putCohorts default  %+v", o._statusCode, o.Payload)
}

func (o *PutCohortsDefault) GetPayload() *PutCohortsDefaultBody {
	return o.Payload
}

func (o *PutCohortsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutCohortsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutCohortsBody put cohorts body
swagger:model PutCohortsBody
*/
type PutCohortsBody struct {

	// creation date
	CreationDate string `json:"creationDate,omitempty"`

	// patient set ID
	PatientSetID int64 `json:"patientSetID,omitempty"`

	// update date
	UpdateDate string `json:"updateDate,omitempty"`
}

// Validate validates this put cohorts body
func (o *PutCohortsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCohortsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCohortsBody) UnmarshalBinary(b []byte) error {
	var res PutCohortsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutCohortsDefaultBody put cohorts default body
swagger:model PutCohortsDefaultBody
*/
type PutCohortsDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this put cohorts default body
func (o *PutCohortsDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutCohortsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutCohortsDefaultBody) UnmarshalBinary(b []byte) error {
	var res PutCohortsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
