
-- pl/pgsql function that implement the construction of relative times for survival analysis
CREATE OR REPLACE TYPE timepoint_type AS (count bigint, timepoint bigint, end_type integer);

CREATE FUNCTION build_timepoints(patient_list integer[], start_code varchar, start_modifier_code varchar, end_code varchar, end_modifier_code varchar, time_limit integer) 
RETURNS ROWS timepoint_type
AS $$
DECLARE

BEGIN


RETURN EXECUTE QUERY format(
  'SELECT * FROM (SELECT COUNT(patient_num), DATE_PART(%L,end_date::timestamp - start_date::timestamp)::bigint as timepoint, end_type FROM(
	SELECT z.patient_num, z.start_date, COALESCE(z.end_date,w.end_date) as end_date , COALESCE(z.wagner, w.wagner) as end_type FROM (SELECT x.patient_num, start_date, end_date,wagner FROM(
	SELECT patient_num, min(start_date) as start_date

	FROM i2b2demodata_i2b2.observation_fact
	where patient_num = ANY($1::varchar[]) AND concept_cd = ANY($2::varchar[]) and modifier_cd = ANY($3::varchar[])
	GROUP BY patient_num) as x
LEFT JOIN (SELECT patient_num, min(start_date) as end_date, 1 as wagner

	FROM i2b2demodata_i2b2.observation_fact
	where concept_cd = ANY($4::varchar[]) AND modifier_cd = ANY($5::varchar[])
	GROUP BY patient_num) as y
	ON x.patient_num =y.patient_num) as z
LEFT JOIN (SELECT patient_num, max(coalesce(end_date,start_date)) as end_date, 0 as wagner

	FROM i2b2demodata_i2b2.observation_fact
	where concept_cd != ANY($4::varchar[]) AND modifier_cd != ANY($5::varchar[])
	GROUP BY patient_num) as w
ON w.patient_num = z.patient_num
) as relative_timepoints

GROUP BY timepoint, end_type) as asdf
where timepoint <$6  and timepoint >=0',
'day')
USING patient_list, start_code, start_modifier_code, end_code, end_modifier_code, time_limit;

 

END;
$$ LANGUAGE plpgsql