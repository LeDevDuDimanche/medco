// Code generated by go-swagger; DO NOT EDIT.

package picsure2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/ldsec/medco-connector/restapi/models"
)

// QueryStatusHandlerFunc turns a function with the right signature into a query status handler
type QueryStatusHandlerFunc func(QueryStatusParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn QueryStatusHandlerFunc) Handle(params QueryStatusParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// QueryStatusHandler interface for that can handle valid query status params
type QueryStatusHandler interface {
	Handle(QueryStatusParams, *models.User) middleware.Responder
}

// NewQueryStatus creates a new http.Handler for the query status operation
func NewQueryStatus(ctx *middleware.Context, handler QueryStatusHandler) *QueryStatus {
	return &QueryStatus{Context: ctx, Handler: handler}
}

/*QueryStatus swagger:route POST /picsure2/query/{queryId}/status picsure2 queryStatus

Get status of query.

*/
type QueryStatus struct {
	Context *middleware.Context
	Handler QueryStatusHandler
}

func (o *QueryStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewQueryStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// QueryStatusBody query status body
// swagger:model QueryStatusBody
type QueryStatusBody struct {

	// resource credentials
	ResourceCredentials *models.ResourceCredentials `json:"resourceCredentials,omitempty"`
}

// Validate validates this query status body
func (o *QueryStatusBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResourceCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryStatusBody) validateResourceCredentials(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceCredentials) { // not required
		return nil
	}

	if o.ResourceCredentials != nil {
		if err := o.ResourceCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "resourceCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *QueryStatusBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryStatusBody) UnmarshalBinary(b []byte) error {
	var res QueryStatusBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// QueryStatusDefaultBody query status default body
// swagger:model QueryStatusDefaultBody
type QueryStatusDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this query status default body
func (o *QueryStatusDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryStatusDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryStatusDefaultBody) UnmarshalBinary(b []byte) error {
	var res QueryStatusDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
