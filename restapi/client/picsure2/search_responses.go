// Code generated by go-swagger; DO NOT EDIT.

package picsure2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ldsec/medco-connector/restapi/models"
)

// SearchReader is a Reader for the Search structure.
type SearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSearchDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSearchOK creates a SearchOK with default headers values
func NewSearchOK() *SearchOK {
	return &SearchOK{}
}

/*SearchOK handles this case with default header values.

Search results.
*/
type SearchOK struct {
	Payload *SearchOKBody
}

func (o *SearchOK) Error() string {
	return fmt.Sprintf("[POST /search][%d] searchOK  %+v", 200, o.Payload)
}

func (o *SearchOK) GetPayload() *SearchOKBody {
	return o.Payload
}

func (o *SearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefault creates a SearchDefault with default headers values
func NewSearchDefault(code int) *SearchDefault {
	return &SearchDefault{
		_statusCode: code,
	}
}

/*SearchDefault handles this case with default header values.

Error response
*/
type SearchDefault struct {
	_statusCode int

	Payload *SearchDefaultBody
}

// Code gets the status code for the search default response
func (o *SearchDefault) Code() int {
	return o._statusCode
}

func (o *SearchDefault) Error() string {
	return fmt.Sprintf("[POST /search][%d] search default  %+v", o._statusCode, o.Payload)
}

func (o *SearchDefault) GetPayload() *SearchDefaultBody {
	return o.Payload
}

func (o *SearchDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SearchBody search body
swagger:model SearchBody
*/
type SearchBody struct {

	// query
	Query *models.SearchQuery `json:"query,omitempty"`

	// resource credentials
	ResourceCredentials *models.ResourceCredentials `json:"resourceCredentials,omitempty"`

	// resource UUID
	ResourceUUID string `json:"resourceUUID,omitempty"`
}

// Validate validates this search body
func (o *SearchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResourceCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchBody) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(o.Query) { // not required
		return nil
	}

	if o.Query != nil {
		if err := o.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query")
			}
			return err
		}
	}

	return nil
}

func (o *SearchBody) validateResourceCredentials(formats strfmt.Registry) error {

	if swag.IsZero(o.ResourceCredentials) { // not required
		return nil
	}

	if o.ResourceCredentials != nil {
		if err := o.ResourceCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "resourceCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchBody) UnmarshalBinary(b []byte) error {
	var res SearchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchDefaultBody search default body
swagger:model SearchDefaultBody
*/
type SearchDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this search default body
func (o *SearchDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchDefaultBody) UnmarshalBinary(b []byte) error {
	var res SearchDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBody search o k body
swagger:model SearchOKBody
*/
type SearchOKBody struct {

	// results
	Results []*models.SearchResultElement `json:"results"`

	// search query
	SearchQuery string `json:"searchQuery,omitempty"`
}

// Validate validates this search o k body
func (o *SearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBody) UnmarshalBinary(b []byte) error {
	var res SearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
